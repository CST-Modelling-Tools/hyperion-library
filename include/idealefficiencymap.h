#ifndef IDEALEFFICIENCYMAP_H
#define IDEALEFFICIENCYMAP_H

#include <vector>

#include "hyperionlibrary_export.h"  // Automatically generated by CMake

#include "environment.h"
#include "boundaries.h"
#include "receiver.h"
#include "heliostat.h"

namespace hypl
{
    class HYPERIONLIBRARY_EXPORT IdealEfficiencyMap
    {
    public:

        IdealEfficiencyMap(Environment environment, Boundaries boundaries, std::vector<Receiver> receivers, int nrows, int ncolumns);

        // Disable copy constructor and copy assignment operator
        IdealEfficiencyMap(const IdealEfficiencyMap&) = delete;
        IdealEfficiencyMap& operator=(const IdealEfficiencyMap&) = delete;

        // Disable move constructor and move assignment operator
        IdealEfficiencyMap(IdealEfficiencyMap&&) = delete;
        IdealEfficiencyMap& operator=(IdealEfficiencyMap&&) = delete;

        //Accessors
        Environment const& environment() const {return m_environment;}
        Boundaries const& boundaries() const {return m_boundaries;}
        std::vector<Receiver> const& receivers() const {return m_receiver;}
        int const& nrows() const {return m_nrows;}
        int const& ncolumns() const {return m_ncolumns;}
        std::vector<Heliostat> const& heliostats() {return m_heliostat;}

        //Mutators
        void update();
        void regenerate();
        void set_environment(const Environment& environment) {m_environment = environment; update();}
        void set_boundaries(const Boundaries& boundaries) {m_boundaries = boundaries; regenerate();}
        void set_receivers(const std::vector<Receiver>& receivers) {m_receiver = receivers; update();}
        void set_receivers_radius(double radius);
        void set_nrows(int nrows) {m_nrows = nrows; regenerate();}
        void set_ncolumns(int ncolumns) {m_ncolumns = ncolumns; regenerate();}
        void set_dimensions(int nrows, int ncolumns) {m_nrows = nrows; m_ncolumns = ncolumns; regenerate();}

        //Public functions
        void EvaluateAnnualEfficiencies(hypl::Heliostat::IdealEfficiencyType ideal_efficiency_type, double delta_t);

    private:
        void ProcessDay(int day_number, Heliostat::IdealEfficiencyType ideal_efficiency_type, 
                        double delta_hour_angle, double weight, double& direct_insolation);
        double StartingHourAngle(double wo, double delta_hour_angle);

    private:
        Environment m_environment;
        Boundaries m_boundaries;
        std::vector<Receiver> m_receiver;
        int m_nrows;
        int m_ncolumns;
        std::vector<Heliostat> m_heliostat;
    };
}
#endif IDEALEFFICIENCYMAP_H